### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccessToken {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  session: Session!
  updatedAt: DateTime!
  value: String!
}

"""Web entity or Application registered to use some or all services"""
type App {
  clientId: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

"""
The parameters necessary to start an OAuth2.0 flow with an external provider
"""
type AuthorizeType {
  """PKCE verifier generated for this request (save as cookie)"""
  pkce: String

  """State generated for this request (save as cookie)"""
  state: String

  """The endpoint to which an OAuth2.0 authorize request must be sent"""
  url: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type EmailVerificationToken {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  value: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """Log in a user"""
  login(
    """The ID of the application the user would like to enter"""
    appId: String!

    """Code received from provider to log in"""
    code: String!

    """Expected state (from cookie)"""
    expectedState: String

    """PKCE verifier token"""
    pkce: String

    """Provider you used to log in with"""
    provider: OAuthProvider!

    """Uri where the user should be redirected to"""
    redirectUri: String!

    """Actual state (from callback url parameters)"""
    state: String
  ): Session!

  """Invalidate a session"""
  logout: Session!

  """Refresh an expired access token"""
  refresh(
    """The latest active refresh token associated with the session"""
    refresh: String!
  ): TokenPayload!
}

enum OAuthProvider {
  DISCORD
  FACEBOOK
  GITHUB
  GOOGLE
  INSTAGRAM
  TIKTOK
}

type Query {
  """Get the information to send an authorization request from the client"""
  authorize(
    """The ID of the application the user would like to enter"""
    appId: String!

    """Provider you wish to request authorization from"""
    provider: OAuthProvider!

    """Url to where the user should be redirected after authorizing"""
    redirectUri: String!
  ): AuthorizeType!
}

type RefreshToken {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  session: Session!
  updatedAt: DateTime!
  value: String!
}

type Session {
  accessToken: AccessToken
  createdAt: DateTime!
  data: Json
  id: ID!
  refreshToken: RefreshToken
  updatedAt: DateTime!
  user: User!
}

"""The payload returned when initiating or refreshing a session"""
type TokenPayload {
  """Token used to authenticate user against this api"""
  access: String!

  """After this date, the access token is no longer valid"""
  accessExpiresAt: DateTime!

  """Token used to refresh an expired access token"""
  refresh: String!

  """After this date, the refresh token is no longer valid"""
  refreshExpiresAt: DateTime!
}

type User {
  """
  If a user is blocked, this field contains the reason why the user was blocked
  """
  blocked: String
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  id: ID!
  image: String
  name: String

  """The ID of this user in the service consumer's system"""
  ref: String!
  updatedAt: DateTime!
}

"""Client who visited the app, either authenticated or unauthenticated"""
type Visitor {
  app: App!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}
